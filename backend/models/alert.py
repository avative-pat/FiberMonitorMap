from datetime import datetime
from typing import Optional, List
from pydantic import BaseModel
from enum import Enum

class AlertSeverity(str, Enum):
    LOW = "low"
    MEDIUM = "medium"
    HIGH = "high"
    CRITICAL = "critical"

class AlertType(str, Enum):
    FIBER_CUT = "fiber_cut"
    POWER_OUTAGE = "power_outage"
    ETHERNET_ISSUE = "ethernet_issue"
    ONT_MISSING = "ont_missing"
    GENERAL = "general"

class Alert(BaseModel):
    """System alert generated by rules engine"""
    id: str
    type: AlertType
    severity: AlertSeverity
    message: str
    region: Optional[str] = None
    pon_port: Optional[str] = None
    affected_onts: List[str] = []
    created_at: datetime
    is_active: bool = True

class AlertResponse(BaseModel):
    """Response model for alert API endpoints"""
    id: str
    type: str
    severity: str
    message: str
    region: Optional[str] = None
    pon_port: Optional[str] = None
    affected_onts: List[str] = []
    created_at: str
    is_active: bool = True
    
    # Computed fields
    icon: str = ""
    color: str = ""
    
    def __init__(self, **data):
        super().__init__(**data)
        self._set_display_properties()
    
    def _set_display_properties(self):
        """Set icon and color based on alert type and severity"""
        if self.type == AlertType.FIBER_CUT:
            self.icon = "ðŸš¨"
            self.color = "red"
        elif self.type == AlertType.POWER_OUTAGE:
            self.icon = "âš¡"
            self.color = "orange"
        elif self.type == AlertType.ETHERNET_ISSUE:
            self.icon = "âš "
            self.color = "yellow"
        elif self.type == AlertType.ONT_MISSING:
            self.icon = "ðŸ“¡"
            self.color = "blue"
        else:
            self.icon = "â„¹"
            self.color = "gray" 